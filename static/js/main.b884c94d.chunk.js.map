{"version":3,"sources":["Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","util/Spotify.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","onChange","placeholder","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","accessToken","Spotify","getAccessToken","accessTokenFound","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","tracksUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackUris","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b884c94d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\nconstructor(props){\r\n    super(props);\r\n    this.state = {\r\n        term: ''\r\n    }\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n}\r\n\r\nsearch(){\r\n    this.props.onSearch(this.state.term); \r\n}\r\n\r\nhandleTermChange(event){\r\n    this.setState({ term: event.target.value });\r\n}\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"SearchBar\">\r\n        <input onChange={this.handleTermChange} placeholder=\"Enter A Song, Album, or Artist\"/>\r\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n        </div>\r\n    ); \r\n}\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\n\r\nclass Track extends React.Component {\r\n\r\nconstructor(props){\r\n    super(props);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n}\r\n\r\naddTrack(){\r\n    this.props.onAdd(this.props.track);\r\n}\r\n\r\nremoveTrack(){\r\n    this.props.onRemove(this.props.track); \r\n}\r\n\r\nrenderAction(){\r\n    if (this.props.isRemoval) {\r\n        return <button className=\"Track-action\" onClick = {this.removeTrack}>-</button>\r\n    }else{\r\n        return <button className=\"Track-action\" onClick = {this.addTrack}>+</button>\r\n    }\r\n}\r\n\r\n\r\nrender(){\r\n    return (\r\n        <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{this.props.track.name}</h3>\r\n                <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n            </div>\r\n        {this.renderAction()}\r\n        </div>\r\n        ) \r\n    }\r\n\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\n\r\nclass TrackList extends React.Component {\r\nrender(){\r\n    return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => {\r\n                        return <Track track={ track } \r\n                                key={ track.id } \r\n                                onAdd={ this.props.onAdd } \r\n                                onRemove={ this.props.onRemove } \r\n                                isRemoval={ this.props.isRemoval }/>\r\n                    })\r\n                }\r\n             </div>\r\n            ) \r\n}\r\n\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './SearchResults.css';\r\n\r\n\r\nclass SearchResults extends React.Component {\r\nrender(){\r\n    return (\r\n        <div className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <TrackList tracks={ this.props.searchResults } onAdd={ this.props.onAdd } isRemoval={ false }/>\r\n        </div>\r\n        ) \r\n    }\r\n\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport './Playlist.css';\r\n\r\n\r\nclass Playlist extends React.Component {\r\n\r\nconstructor(props){\r\n    super(props);\r\n    this.handleNameChange = this.handleNameChange.bind.this\r\n}\r\n\r\nhandleNameChange(event) {\r\n    this.props.onNameChange(event.target.value);\r\n}    \r\n\r\nrender(){\r\n    return (\r\n        <div className=\"Playlist\">\r\n        <input defaultValue={\"New Playlist\"} onChange={this.props.handleNameChange}/>\r\n        <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n        <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n      </div>\r\n    ); \r\n}\r\n\r\n}\r\n\r\nexport default Playlist;\r\n","const clientId= '79d9cf0647ce4c80bbd9d62d44af7e96';\r\nlet accessToken = '';\r\nconst redirectUri = 'https://mtz.surge.sh/';\r\n\r\n\r\nconst Spotify = {\r\n  getAccessToken(){\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    let accessTokenFound = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n    if(accessTokenFound &&  expiresInMatch){\r\n      accessToken = accessTokenFound[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n\r\n      window.setTimeout(() => { accessToken = '' ; }, expiresIn * 1000 );\r\n      window.history.pushState('Access Token', null, '/');\r\n      return accessToken;\r\n    } else {\r\n      window.location = 'https://accounts.spotify.com/authorize?client_id=' + clientId + '&response_type=token&scope=playlist-modify-public&redirect_uri=' + redirectUri;\r\n    }\r\n\r\n  },\r\n\r\n  search(term){\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { headers: {Authorization: `Bearer  ${accessToken}`\r\n    }}).then( response => {\r\n        return response.json();\r\n    }).then( jsonResponse => {\r\n        if(!jsonResponse.tracks){\r\n          return [];\r\n        }\r\n\r\n        return jsonResponse.tracks.items.map(track => ({ \r\n            id: track.id,\r\n            name: track.name,\r\n            artist:  track.artists[0].name,\r\n            album: track.album.name,\r\n            uri: track.uri \r\n          }));\r\n      });\r\n  },\r\n\r\n  savePlaylist(name,tracksUris){\r\n    if(!name || !tracksUris.length){\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}`};\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', { headers: headers }).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, { headers : headers, method: 'POST', body: JSON.stringify({ name: name })\r\n    }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(\t`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks` , { headers : headers, method: 'POST', body: JSON.stringify({ uris : tracksUris})\r\n        });\r\n      });\r\n    });\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Spotify;\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    tracks.push(track);\n    this.setState({playlistTracks: tracks})\n  }\n\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(()=> { this.setState({\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    })})\n  }\n \n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    })\n  }\n\n  render(){\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\"> \n        <SearchBar onSearch={this.search}/>\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={ this.state.searchResults } onAdd={ this.addTrack }/>\n          <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist}/>\n        </div>\n      </div>\n    </div>\n  );\n};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}